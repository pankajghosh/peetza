"""
Create models

Revision ID: bfd429ea652a
Revises: e107ab9eb193
Create Date: 2019-10-10 17:36:11.879399

"""
import microcosm_postgres
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bfd429ea652a'
down_revision = 'e107ab9eb193'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('order',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
                    sa.Column('created_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
                    sa.Column('updated_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('customer_event',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', sa.Float(), nullable=False),
    sa.Column('updated_at', sa.Float(), nullable=False),
    sa.Column('pizza_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=True),
    sa.Column('pizza_type', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('pizza_size', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('topping_type', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('event_type', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('clock', microcosm_postgres.types.Serial(), server_default=FetchedValue(), nullable=False),
    sa.Column('parent_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=True),
    sa.Column('state', postgresql.ARRAY(microcosm_postgres.types.EnumType(length=255)), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.CheckConstraint("order_id IS NOT NULL OR event_type NOT IN ('CustomerStartedOrder')", name='require_customer_event_order_id'),
    sa.CheckConstraint("parent_id IS NOT NULL OR (version = 1 AND event_type IN ('CustomerStartedOrder'))", name='require_customer_event_parent_id'),
    sa.CheckConstraint("pizza_id IS NOT NULL OR event_type NOT IN ('CustomerStartedPizza')", name='require_customer_event_pizza_id'),
    sa.CheckConstraint("pizza_size IS NOT NULL OR event_type NOT IN ('CustomerChosePizzaType')", name='require_customer_event_pizza_size'),
    sa.CheckConstraint("pizza_type IS NOT NULL OR event_type NOT IN ('CustomerChosePizzaType')", name='require_customer_event_pizza_type'),
    sa.CheckConstraint("topping_type IS NOT NULL OR event_type NOT IN ('CustomerAddedTopping')", name='require_customer_event_topping_type'),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['customer_event.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('clock'),
    sa.UniqueConstraint('parent_id')
    )
    op.create_index('customer_event_unique_logical_clock', 'customer_event', ['order_id', 'clock'], unique=True)
    op.create_table('pizza',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('updated_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('pizza_size', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('pizza_type', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('pizza_order_id_idx', 'pizza', ['order_id'], unique=False)
    op.create_table('topping',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('updated_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('pizza_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('topping_type', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.ForeignKeyConstraint(['pizza_id'], ['pizza.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('topping_pizza_id_idx', 'topping', ['pizza_id'], unique=False)
    op.create_index('unique_topping', 'topping', ['pizza_id', 'topping_type'], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('unique_topping', table_name='topping')
    op.drop_index('topping_pizza_id_idx', table_name='topping')
    op.drop_table('topping')
    op.drop_index('pizza_order_id_idx', table_name='pizza')
    op.drop_table('pizza')
    op.drop_index('customer_event_unique_logical_clock', table_name='customer_event')
    op.drop_table('customer_event')
    op.drop_table('order')
    # ### end Alembic commands ###
