#
#  Globality autogenerated CircleCI configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2019.39.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"

deploy_defaults: &deploy_defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2019.39.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"

whitelist: &whitelist
  paths:
    .

version: 2

jobs:
  checkout:
    <<: *defaults

    steps:
      - checkout

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist

  build_base_docker:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Build Base Docker
          # install dependencies for loading ecs task definitions
          command: |
            eval $(aws ecr get-login --no-include-email)
            globality-build build-gen local
            globality-build docker --repo peetza

  test:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker
      - run:
          name: pull and run database - postgres
          command: |
            docker pull postgres
            docker run -d --name peetza_db -e POSTGRES_DB=peetza_test_db -e POSTGRES_USER=peetza postgres
      - run:
          name: Test code
          command: |
            docker create -v /src/peetza/tests/ --name service_tests alpine:3.4 /bin/true
            docker cp $(pwd)/peetza/tests service_tests:/src/peetza/
            eval $(aws ecr get-login --no-include-email)
            docker pull ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1}
            docker run -it  --link peetza_db:postgres -e PEETZA__POSTGRES__HOST=postgres --volumes-from service_tests ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1} test
  lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Run Lint
          command: |
            docker create -v /src/peetza/tests/ --name service_tests alpine:3.4 /bin/true
            docker cp $(pwd)/peetza/tests service_tests:/src/peetza/
            eval $(aws ecr get-login --no-include-email)
            docker pull ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1}
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1} lint

  typehinting:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Run Typehinting
          command: |
            docker create -v /src/peetza/tests/ --name service_tests alpine:3.4 /bin/true
            docker cp $(pwd)/peetza/tests service_tests:/src/peetza/
            eval $(aws ecr get-login --no-include-email)
            docker pull ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1}
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/peetza:${CIRCLE_SHA1} typehinting
  deploy_dev:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy dev
          command: |
            export CLUSTER="service-dev"
            export ENVIRONMENT=dev
            export NAME=peetza
            globality-build docker-tag \
                --service peetza \
                --sha ${CIRCLE_SHA1} \
                --tag develop
            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  backup_ecr_dev:
    <<: *deploy_defaults
    steps:
      - setup_remote_docker
      - run:
          name: Backup ECR dev
          command: |
            globality-build docker-duplicate \
                --service peetza \
                --tag develop \
                --no-dry-run
  deploy_test:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy test
          command: |
            export CLUSTER="service-test"
            export ENVIRONMENT=test
            export NAME=peetza
            globality-build docker-tag \
                --service peetza \
                --sha ${CIRCLE_SHA1} \
                --tag ${CIRCLE_BRANCH//\//-}
            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  backup_ecr_test:
    <<: *deploy_defaults
    steps:
      - setup_remote_docker
      - run:
          name: Backup ECR test
          command: |
            globality-build docker-duplicate \
                --service peetza \
                --tag ${CIRCLE_BRANCH//\//-} \
                --no-dry-run
  deploy_demo:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy demo
          command: |
            export CLUSTER="service-demo"
            export ENVIRONMENT=demo
            export NAME=peetza
            globality-build docker-tag \
                --service peetza \
                --sha ${CIRCLE_SHA1} \
                --tag ${CIRCLE_TAG}
            globality-build deploy --service $NAME --environment $ENVIRONMENT --sha ${CIRCLE_SHA1} --cluster $CLUSTER

  backup_ecr_demo:
    <<: *deploy_defaults
    steps:
      - setup_remote_docker
      - run:
          name: Backup ECR demo
          command: |
            globality-build docker-duplicate \
                --service peetza \
                --tag ${CIRCLE_TAG} \
                --no-dry-run

workflows:
  version: 2

  build-and-release:
    jobs:
      - checkout:
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - build_base_docker:
          requires:
            - checkout
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - test:
          requires:
            - build_base_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - lint:
          requires:
            - build_base_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - typehinting:
          requires:
            - build_base_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/

      - deploy_dev:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: develop


      - backup_ecr_dev:
          requires:
            - deploy_dev
          filters:
            branches:
              only: develop


      - deploy_test:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              only: /release\/2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/


      - backup_ecr_test:
          requires:
            - deploy_test
          filters:
            branches:
              only: /release\/2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/


      - deploy_demo:
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/


      - backup_ecr_demo:
          requires:
            - deploy_demo
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/



